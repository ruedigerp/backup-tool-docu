{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BackupItAll \u00b6 15:20 var config = { startOnLoad:true, theme: 'forest', flowchart:{ useMaxWidth:false, htmlLabels:true } }; mermaid.initialize(config); window.mermaid.init(undefined, document.querySelectorAll('.language-mermaid')); flowchart LR A[If I] --> B{could}; B -- Yes --> C[I would]; C --> D[Let it go, Surrender, Dislocate]; timeline title History of Social Media Platform 2002 : LinkedIn 2004 : Facebook : Google 2005 : Youtube 2006 : Twitter BackupItAll creates a current copy of the source directory when executed. Depending on the configuration (Daily, Weekly), the target directory is named by date or weekday (Monday 1, Tuesday 2, ... Sunday 7). The target directories and files are created using hard links. Even if the source directory is, for example, 2 GB and the changes from the previous day are only a few MB, the directory will show 2 GB when checking disk usage. However, it contains only the MB of data that has changed. If the backup from the previous day or from one/more days is deleted, these data are still included in the current backup. This approach saves storage space while ensuring all data is included. Local or remote \u00b6 BackupItAll can back up data locally on the hard drive or remotely, e.g., via SSH from another computer. The configuration is done through individual configuration files and symbolic links for each backup job. Daily Backup creates a folder named YYYY-MM-DD for each day. Weekly Backup always creates a folder for each weekday (1-7). In Weekly Backup, the current backup is copied on Monday (1), so a backup is stored for the entire week. The same will happen with monthly backups in the future, ensuring that backups are available for a longer period. Daily backups are always overwritten. In both variants, the daily backup can be run multiple times. If the backup runs hourly, all changes from the previous day to the current time are included. A feature in an upcoming version will ensure that files are not deleted in intermediate runs; only during the final run of the day will deleted files be removed from the backup. This way, deleted data can still be restored from the backup during the day. Encryption \u00b6 Currently, backups are not encrypted. This function will also be available shortly. Requirements for remote backup over ssh \u00b6 For backing up data from a remote computer, an SSH key is required, and SSH login must work.","title":"Home"},{"location":"#backupitall","text":"15:20 var config = { startOnLoad:true, theme: 'forest', flowchart:{ useMaxWidth:false, htmlLabels:true } }; mermaid.initialize(config); window.mermaid.init(undefined, document.querySelectorAll('.language-mermaid')); flowchart LR A[If I] --> B{could}; B -- Yes --> C[I would]; C --> D[Let it go, Surrender, Dislocate]; timeline title History of Social Media Platform 2002 : LinkedIn 2004 : Facebook : Google 2005 : Youtube 2006 : Twitter BackupItAll creates a current copy of the source directory when executed. Depending on the configuration (Daily, Weekly), the target directory is named by date or weekday (Monday 1, Tuesday 2, ... Sunday 7). The target directories and files are created using hard links. Even if the source directory is, for example, 2 GB and the changes from the previous day are only a few MB, the directory will show 2 GB when checking disk usage. However, it contains only the MB of data that has changed. If the backup from the previous day or from one/more days is deleted, these data are still included in the current backup. This approach saves storage space while ensuring all data is included.","title":"BackupItAll"},{"location":"#local-or-remote","text":"BackupItAll can back up data locally on the hard drive or remotely, e.g., via SSH from another computer. The configuration is done through individual configuration files and symbolic links for each backup job. Daily Backup creates a folder named YYYY-MM-DD for each day. Weekly Backup always creates a folder for each weekday (1-7). In Weekly Backup, the current backup is copied on Monday (1), so a backup is stored for the entire week. The same will happen with monthly backups in the future, ensuring that backups are available for a longer period. Daily backups are always overwritten. In both variants, the daily backup can be run multiple times. If the backup runs hourly, all changes from the previous day to the current time are included. A feature in an upcoming version will ensure that files are not deleted in intermediate runs; only during the final run of the day will deleted files be removed from the backup. This way, deleted data can still be restored from the backup during the day.","title":"Local or remote"},{"location":"#encryption","text":"Currently, backups are not encrypted. This function will also be available shortly.","title":"Encryption"},{"location":"#requirements-for-remote-backup-over-ssh","text":"For backing up data from a remote computer, an SSH key is required, and SSH login must work.","title":"Requirements for remote backup over ssh"},{"location":"docu/configuration/","text":"Configuration \u00b6 Create config \u00b6 Config in etc/backup.conf content: # Backup type: DATE, WEEKLY BACKUPTYPE=\"DATE\" Create a file in the ./etc/ directory for each backup. For example, if you want to back up the nginx configuration, use etc/nginx with the following content: SOURCE=web001.domain.tld:/etc/${MYNAME}/ DESTDIR=web001.domain.tld SOURCE in this example is the directory /etc/nginx on the server web001.domain.tld . DESTDIR is the directory where all backups for nginx are stored. If Bind is also installed on the server and you want to back it up as well, simply create a file in etc/ with the name bind . Content: ACTIVE=1 SOURCE=web001.domain.tld:/etc/${MYNAME}/ DESTDIR=web001.domain.tld Activate backup \u00b6 cd enabled ln -nfs ../bin/backup.sh nginx ln -nfs ../bin/backup.sh bind cd - Local folder Backup \u00b6 The BackupItAll can also back up local folders. Content local.conf: ACTIVE=1 SOURCE=tests/source/ DESTDIR=tests/dest Activate backup \u00b6 cd enabled ln -nfs ../bin/backup.sh local cd - Run Backup: \u00b6 #> $(pwd)/run.sh Cron \u00b6 36 15 * * * user1 ${HOME}/backups/run.sh | tee -a ${HOME}/backups/backup.log Check Backup \u00b6 #> ls web001.domain.tld/nginx 2024-07-16 2024-07-17 2024-07-18 #> ls web001.domain.tld/bind 2024-07-16 2024-07-17 2024-07-18 The first backup was made on 2024-07-16. The folder 2024-07-17 contains the changes from the previous day, and the backup 2024-07-18 only includes the changes since 2024-07-17. #> du -sch web001.domain.tld/bind/* 2.9M web001.domain.tld/bind/2024-07-16 28K web001.domain.tld/bind/2024-07-17 28K web001.domain.tld/bind/2024-07-18 3.0M total If you now delete the backup from 2024-07-16, it results in the following: #> rm -rf web001.domain.tld/bind/2024-07-16/ #> du -sch web001.domain.tld/bind/* 2.9M web001.domain.tld/bind/2024-07-17 28K web001.domain.tld/bind/2024-07-18 2.9M total The backup from 2024-07-17 now also includes all data from 2024-07-16 and grows in size from 28k to 2.9M.","title":"Configuration"},{"location":"docu/configuration/#configuration","text":"","title":"Configuration"},{"location":"docu/configuration/#create-config","text":"Config in etc/backup.conf content: # Backup type: DATE, WEEKLY BACKUPTYPE=\"DATE\" Create a file in the ./etc/ directory for each backup. For example, if you want to back up the nginx configuration, use etc/nginx with the following content: SOURCE=web001.domain.tld:/etc/${MYNAME}/ DESTDIR=web001.domain.tld SOURCE in this example is the directory /etc/nginx on the server web001.domain.tld . DESTDIR is the directory where all backups for nginx are stored. If Bind is also installed on the server and you want to back it up as well, simply create a file in etc/ with the name bind . Content: ACTIVE=1 SOURCE=web001.domain.tld:/etc/${MYNAME}/ DESTDIR=web001.domain.tld","title":"Create config"},{"location":"docu/configuration/#activate-backup","text":"cd enabled ln -nfs ../bin/backup.sh nginx ln -nfs ../bin/backup.sh bind cd -","title":"Activate backup"},{"location":"docu/configuration/#local-folder-backup","text":"The BackupItAll can also back up local folders. Content local.conf: ACTIVE=1 SOURCE=tests/source/ DESTDIR=tests/dest","title":"Local folder Backup"},{"location":"docu/configuration/#activate-backup_1","text":"cd enabled ln -nfs ../bin/backup.sh local cd -","title":"Activate backup"},{"location":"docu/configuration/#run-backup","text":"#> $(pwd)/run.sh","title":"Run Backup:"},{"location":"docu/configuration/#cron","text":"36 15 * * * user1 ${HOME}/backups/run.sh | tee -a ${HOME}/backups/backup.log","title":"Cron"},{"location":"docu/configuration/#check-backup","text":"#> ls web001.domain.tld/nginx 2024-07-16 2024-07-17 2024-07-18 #> ls web001.domain.tld/bind 2024-07-16 2024-07-17 2024-07-18 The first backup was made on 2024-07-16. The folder 2024-07-17 contains the changes from the previous day, and the backup 2024-07-18 only includes the changes since 2024-07-17. #> du -sch web001.domain.tld/bind/* 2.9M web001.domain.tld/bind/2024-07-16 28K web001.domain.tld/bind/2024-07-17 28K web001.domain.tld/bind/2024-07-18 3.0M total If you now delete the backup from 2024-07-16, it results in the following: #> rm -rf web001.domain.tld/bind/2024-07-16/ #> du -sch web001.domain.tld/bind/* 2.9M web001.domain.tld/bind/2024-07-17 28K web001.domain.tld/bind/2024-07-18 2.9M total The backup from 2024-07-17 now also includes all data from 2024-07-16 and grows in size from 28k to 2.9M.","title":"Check Backup"},{"location":"docu/install/","text":"Installation \u00b6 Download \u00b6 Curl \u00b6 curl -o BackupItAll-v1.2.2.tar.gz L https://github.com/ruedigerp/BackupItAll/archive/refs/tags/v1.2.2.tar.gz tar xzf BackupItAll-v1.2.2.tar.gz cd BackupItAll-v1.2.2 Github \u00b6 git clone https://github.com/ruedigerp/BackupItAll cd BackupItAll","title":"Installation"},{"location":"docu/install/#installation","text":"","title":"Installation"},{"location":"docu/install/#download","text":"","title":"Download"},{"location":"docu/install/#curl","text":"curl -o BackupItAll-v1.2.2.tar.gz L https://github.com/ruedigerp/BackupItAll/archive/refs/tags/v1.2.2.tar.gz tar xzf BackupItAll-v1.2.2.tar.gz cd BackupItAll-v1.2.2","title":"Curl"},{"location":"docu/install/#github","text":"git clone https://github.com/ruedigerp/BackupItAll cd BackupItAll","title":"Github"},{"location":"docu/run-in-docker/","text":"Run BackupItAll in Docker \u00b6 Create the configuration files as described in the configuration . Dockerfile \u00b6 FROM alpine WORKDIR /app mkdir /app/enabled COPY etc/web /app/ COPY bin /app/ COPY run.sh /app/ RUN ln -nfs /app/bin/backup.sh enabled/web EXEC [\"/app/run.sh\"] Download Dockerfile Build docker image \u00b6 docker build -t backupitall . Run docker container \u00b6 docker run -rm -d -it --name backupitall backupitall /bin/bash /app/run.sh","title":"Run in Docker"},{"location":"docu/run-in-docker/#run-backupitall-in-docker","text":"Create the configuration files as described in the configuration .","title":"Run BackupItAll in Docker"},{"location":"docu/run-in-docker/#dockerfile","text":"FROM alpine WORKDIR /app mkdir /app/enabled COPY etc/web /app/ COPY bin /app/ COPY run.sh /app/ RUN ln -nfs /app/bin/backup.sh enabled/web EXEC [\"/app/run.sh\"] Download Dockerfile","title":"Dockerfile"},{"location":"docu/run-in-docker/#build-docker-image","text":"docker build -t backupitall .","title":"Build docker image"},{"location":"docu/run-in-docker/#run-docker-container","text":"docker run -rm -d -it --name backupitall backupitall /bin/bash /app/run.sh","title":"Run docker container"},{"location":"docu/ssh-config/","text":"SSH config for remote \u00b6 To allow BackupItAll to create backups of directories on a remote host, SSH access to the remote host must be set up, and an SSH key pair must be available. Create new SSH-Key \u00b6 #> ssh-keygen -C \"BackupItAll Key\" -f backupitall -t ed25519 #> ls -la total 16 drwxr-xr-x 4 rk staff 128 24 Jul 13:36 . drwxr-xr-x 11 rk staff 352 24 Jul 12:33 .. -rw------- 1 rk staff 411 24 Jul 13:36 backupitall -rw-r--r-- 1 rk staff 97 24 Jul 13:36 backupitall.pub Remote host config \u00b6 The Publickey buckupitall.pub: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHtHb8J3UUSJHO3mnbDl0yxeNC7ALhUUvHUSGNbgArf7 BackupItAll Key will be copied to the remote computer and saved in the file ~/.ssh/authorized_keys in the home directory, or if the file already exists, the public key will be appended. local config \u00b6 To ensure access is performed with the correct user and that further configuration is used appropriately, create an SSH configuration file in the home directory: ~/.ssh/config. If this file already exists, the configuration will be appended. Name Wert Server testweb.example.net Port 22 User backup SSH-Key /backupitall PATHTOKEY example: ~/git/backupitall/backupitall ./backupitall ~/.ssh/backupitall SSH-Config file locate in your home ~/.ssh/config: Host testweb.example.net User backup Port 22 IdentityFile ~/.ssh/backupitall Test SSH-Connection \u00b6 When the public key is on the remote host and everything is set up locally, you can test the connection once: ssh testweb.example.net If the command is successful, you are logged into the remote computer. Problems logging into the remote computer \u00b6 If the login is not possible, there can be several reasons: Wrong servername \u00b6 Check the connection to the server. # check ping ping -c 3 testweb.example.net # check port telnet testweb.example.net 22 # or nmap -sS -P0 testweb.example.net -p 22 Wrong username \u00b6 # check ssh with username ssh -u backup testweb.example.net On the remote host, for example on a Debian machine, you can check the login in the logfile /var/log/auth.log . Wrong SSH-Key \u00b6 ssh -i ~/.ssh/backupitall testweb.example.net check everything without SSH config \u00b6 ssh -i ~/.ssh/backupitall -u backup -p 22 testweb.example.net For all SSH commands, verbose mode can always be activated with -v, -vv, -vvv, or -vvvv.","title":"SSH config for remote"},{"location":"docu/ssh-config/#ssh-config-for-remote","text":"To allow BackupItAll to create backups of directories on a remote host, SSH access to the remote host must be set up, and an SSH key pair must be available.","title":"SSH config for remote"},{"location":"docu/ssh-config/#create-new-ssh-key","text":"#> ssh-keygen -C \"BackupItAll Key\" -f backupitall -t ed25519 #> ls -la total 16 drwxr-xr-x 4 rk staff 128 24 Jul 13:36 . drwxr-xr-x 11 rk staff 352 24 Jul 12:33 .. -rw------- 1 rk staff 411 24 Jul 13:36 backupitall -rw-r--r-- 1 rk staff 97 24 Jul 13:36 backupitall.pub","title":"Create new SSH-Key"},{"location":"docu/ssh-config/#remote-host-config","text":"The Publickey buckupitall.pub: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHtHb8J3UUSJHO3mnbDl0yxeNC7ALhUUvHUSGNbgArf7 BackupItAll Key will be copied to the remote computer and saved in the file ~/.ssh/authorized_keys in the home directory, or if the file already exists, the public key will be appended.","title":"Remote host config"},{"location":"docu/ssh-config/#local-config","text":"To ensure access is performed with the correct user and that further configuration is used appropriately, create an SSH configuration file in the home directory: ~/.ssh/config. If this file already exists, the configuration will be appended. Name Wert Server testweb.example.net Port 22 User backup SSH-Key /backupitall PATHTOKEY example: ~/git/backupitall/backupitall ./backupitall ~/.ssh/backupitall SSH-Config file locate in your home ~/.ssh/config: Host testweb.example.net User backup Port 22 IdentityFile ~/.ssh/backupitall","title":"local config"},{"location":"docu/ssh-config/#test-ssh-connection","text":"When the public key is on the remote host and everything is set up locally, you can test the connection once: ssh testweb.example.net If the command is successful, you are logged into the remote computer.","title":"Test SSH-Connection"},{"location":"docu/ssh-config/#problems-logging-into-the-remote-computer","text":"If the login is not possible, there can be several reasons:","title":"Problems logging into the remote computer"},{"location":"docu/ssh-config/#wrong-servername","text":"Check the connection to the server. # check ping ping -c 3 testweb.example.net # check port telnet testweb.example.net 22 # or nmap -sS -P0 testweb.example.net -p 22","title":"Wrong servername"},{"location":"docu/ssh-config/#wrong-username","text":"# check ssh with username ssh -u backup testweb.example.net On the remote host, for example on a Debian machine, you can check the login in the logfile /var/log/auth.log .","title":"Wrong username"},{"location":"docu/ssh-config/#wrong-ssh-key","text":"ssh -i ~/.ssh/backupitall testweb.example.net","title":"Wrong SSH-Key"},{"location":"docu/ssh-config/#check-everything-without-ssh-config","text":"ssh -i ~/.ssh/backupitall -u backup -p 22 testweb.example.net For all SSH commands, verbose mode can always be activated with -v, -vv, -vvv, or -vvvv.","title":"check everything without SSH config"}]}